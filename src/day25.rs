use std::convert::TryInto;

// To play the text adventure interactively, set DAY_25_VIS=1

/*
   Start at "Hull Breach", end at "Pressure sensor"

                                                               [Engineering]
                                                               [  polygon  ]
                                                                     |
   [Pressure sensor]---[Security Checkpoint]---[Crew Quarters]---[Holodeck]
                                               [  fuel cell  ]       |
                                                                     |
   [Science Lab]---[Navigation]-----------------[Kitchen]-------[ Corridor ]
   [escape pod ]   [  shell   ]                 [antenna]       [candy cane]
                        |                           |                |
   [Passages]---[      Arcade       ]   [Warp Drive Maintenance]     |
                [giant electromagnet]   [     whirled peas     ]     |
                                                                     |
                   [Stables ]---[ Observatory ]---[Sick Bay]---[Hull Breach]
                   [hologram]   [infinite loop]                      |
                                                                     |
                                                           [Gift Wrapping Center]
                                                           [    fixed point     ]

   Items that end the game:
   - escape pod - PC literally "takes" the escape pod, thereby exiting the ship and ending the game
   - giant electromagnet - PC can't move from the room after picking it up
   - infinite loop - game gets stuck in an infinite loop of emitting output, and never accepts any new input

   Solution:

       south
       take fixed point
       north
       north
       take candy cane
       west
       west
       take shell
       east
       east
       north
       north
       take polygon
       south
       west
       west
       west
 */

pub(super) fn run() -> Result<(), super::Error> {
	let line = super::read_input_lines::<String>("day25")?.next().ok_or("file is empty")??;
	let ram: crate::intcode::Ram = line.parse()?;

	let play_game = std::env::var("DAY_25_VIS").is_ok();
	if play_game {
		let mut computer = crate::intcode::Computer::new(ram);

		let mut waiting_for_input = false;

		let mut line = String::new();
		loop {
			let input: Box<dyn Iterator<Item = i64>> =
				if waiting_for_input {
					print!("$ ");
					std::io::Write::flush(&mut std::io::stdout())?;
					std::io::stdin().read_line(&mut line)?;
					let iter = line.clone().into_bytes().into_iter().map(Into::into);
					line.clear();
					waiting_for_input = false;
					Box::new(iter)
				}
				else {
					Box::new(std::iter::empty())
				};

			let output = computer.step(input)?.ok_or("EOF")?;
			match output.try_into()? {
				b'\n' => {
					println!("> {}", line);

					if line == "Command?" {
						waiting_for_input = true;
					}

					line.clear();
				},

				b => line.push(b as char),
			}
		};
	}
	else {
		let mut result = None;

		// Try every permutation of items until the successful combination is found
		'outer: for &fixed_point in &[true, false] {
			for &hologram in &[true, false] {
				for &candy_cane in &[true, false] {
					for &antenna in &[true, false] {
						for &whirled_peas in &[true, false] {
							for &shell in &[true, false] {
								for &polygon in &[true, false] {
									for &fuel_cell in &[true, false] {
										// Build a program that takes the specified subset of items, then tries the pressure sensor.
										// Each item's program starts and ends at the Hull Breach position so that they can be composed arbitrarily.
										//
										// TODO: Dynamically generate these from the puzzle input rather than hard-coding them. :effort:
										// For now, they're generated by playing the game interactively and mapping the dungeon by hand.

										let mut program = String::new();

										if fixed_point {
											program += "\
												south\n\
												take fixed point\n\
												north\n\
											";
										}

										if hologram {
											program += "\
												west\n\
												west\n\
												west\n\
												take hologram\n\
												east\n\
												east\n\
												east\n\
											";
										}

										if candy_cane {
											program += "\
												north\n\
												take candy cane\n\
												south\n\
											";
										}

										if antenna {
											program += "\
												north\n\
												west\n\
												take antenna\n\
												east\n\
												south\n\
											";
										}

										if whirled_peas {
											program += "\
												north\n\
												west\n\
												south\n\
												take whirled peas\n\
												north\n\
												east\n\
												south\n\
											";
										}

										if shell {
											program += "\
												north\n\
												west\n\
												west\n\
												take shell\n\
												east\n\
												east\n\
												south\n\
											";
										}

										if polygon {
											program += "\
												north\n\
												north\n\
												north\n\
												take polygon\n\
												south\n\
												south\n\
												south\n\
											";
										}

										if fuel_cell {
											program += "\
												north\n\
												north\n\
												west\n\
												take fuel cell\n\
												east\n\
												south\n\
												south\n\
											";
										}

										// Try the pressure sensor
										program += "\
											north\n\
											north\n\
											west\n\
											west\n\
											west\n\
											west\n\
										";

										let mut computer = crate::intcode::Computer::new(ram.clone());
										let mut input = program.into_bytes().into_iter().map(Into::into);

										let mut line = String::new();
										loop {
											let output = computer.step(&mut input)?.ok_or("EOF")?;
											match output.try_into()? {
												b'\n' => {
													if line.contains("and you are ejected back to the checkpoint") {
														// This permutation failed. Try the next one.
														break;
													}
													else if line.contains("Oh, hello! You should be able to get in by typing") {
														// Found the solution.

														let mut line_parts = line.split(' ');
														result = Some(
															line_parts
															.nth(11)
															.ok_or_else(|| format!("could not extract password from line {:?}", line))?
															.to_owned()
														);

														break 'outer;
													}

													line.clear();
												},

												b => line.push(b as char),
											}
										}
									}
								}
							}
						}
					}
				}
			}
		};

		let result = result.ok_or("no solution")?;

		println!("25a: {}", result);

		assert_eq!(result, "136839232");
	}

	Ok(())
}
